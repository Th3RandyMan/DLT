# DLT Production Configuration - Universal ML/DL Framework

# Model configuration (example: CNN for image classification)
model_type: "torch.nn.Sequential"
model_params:
  layers:
    - type: "Conv2d"
      in_channels: 3
      out_channels: 64
      kernel_size: 3
      padding: 1
    - type: "BatchNorm2d"
      num_features: 64
    - type: "ReLU"
    - type: "MaxPool2d"
      kernel_size: 2
    - type: "Conv2d"
      in_channels: 64
      out_channels: 128
      kernel_size: 3
      padding: 1
    - type: "BatchNorm2d"
      num_features: 128
    - type: "ReLU"
    - type: "AdaptiveAvgPool2d"
      output_size: [1, 1]
    - type: "Flatten"
    - type: "Linear"
      in_features: 128
      out_features: 10

# Training configuration
training:
  optimizer:
    type: "adamw"
    lr: 0.0001
    weight_decay: 0.01
  loss: "CrossEntropyLoss"
  metrics: ["accuracy", "f1_score"]
  epochs: 200
  batch_size: 64
  validation_split: 0.2
  early_stopping:
    patience: 15
    min_delta: 0.001
  scheduler:
    type: "cosine"

# Data configuration
data:
  preprocessing:
    - type: "normalize"
      mean: [0.485, 0.456, 0.406]
      std: [0.229, 0.224, 0.225]
  augmentation: []  # Disable augmentation in production

# Hardware configuration
hardware:
  device: "auto"  # Auto-detect best device
  precision: 16   # Mixed precision for efficiency
  num_workers: 8
  pin_memory: true
  compile: true   # PyTorch 2.0+ optimization

# Experiment tracking
experiment:
  name: "dlt-production-model"
  tags: ["production", "cnn", "image_classification"]
  notes: "Production model with optimized settings"
  logging:
    level: "WARNING"
    wandb: true
    tensorboard: false

# Deployment settings
deployment:
  save_format: "torch"  # torch, onnx, tensorrt
  optimize_inference: true
  batch_inference: true